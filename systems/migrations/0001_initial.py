# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-04-01 12:35
from __future__ import unicode_literals

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Runner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('runtype', models.CharField(choices=[('LIVE', 'LIVE'), ('HISTORICAL', 'HISTORICAL')], default='HISTORICAL', help_text='live_or_historical', max_length=15)),
                ('racedate', models.DateField(help_text='race date')),
                ('racecoursename', models.CharField(help_text='racecourse', max_length=35)),
                ('racecourseid', models.IntegerField(blank=True, help_text='racecourseid')),
                ('racename', models.CharField(help_text='race name', max_length=250)),
                ('racetypehorse', models.CharField(help_text='entry type horse', max_length=35)),
                ('racetypeconditions', models.CharField(help_text='entry conditions', max_length=35)),
                ('racetypehs', models.CharField(help_text='handicap or stakes', max_length=35)),
                ('ages', models.CharField(help_text='entry type ages', max_length=35)),
                ('oldraceclass', models.CharField(help_text='old raceclass', max_length=35)),
                ('newraceclass', models.CharField(blank=True, help_text='new raceclass', max_length=35)),
                ('distance', models.FloatField(help_text='distance furlongs')),
                ('going', models.CharField(help_text='going', max_length=35)),
                ('norunners', models.SmallIntegerField(help_text='number of runners')),
                ('horsename', models.CharField(help_text='horse name', max_length=250)),
                ('horseid', models.IntegerField(blank=True, default=None, help_text='Horse id')),
                ('sirename', models.CharField(help_text='sire name', max_length=250)),
                ('sireid', models.IntegerField(blank=True, default=None, help_text='Sire id')),
                ('trainername', models.CharField(help_text='trainer', max_length=250)),
                ('trainerid', models.IntegerField(blank=True, default=None, help_text='Trainerid')),
                ('jockeyname', models.CharField(help_text='jockey', max_length=250)),
                ('jockeyid', models.IntegerField(blank=True, default=None, help_text='Jockey id')),
                ('allowance', models.SmallIntegerField(help_text='jockey allowance')),
                ('finalpos', models.CharField(help_text='Final position', max_length=5)),
                ('lbw', models.FloatField(help_text='Beaten by L')),
                ('winsp', models.FloatField(help_text='final starting price win')),
                ('winsppos', models.SmallIntegerField(help_text='rank final starting price')),
                ('bfsp', models.DecimalField(decimal_places=2, help_text='Betfair SP win', max_digits=6)),
                ('bfpsp', models.DecimalField(decimal_places=2, help_text='Betfair SP place', max_digits=6)),
                ('fsratingrank', models.SmallIntegerField(help_text='FS Rating rank')),
                ('fsrating', models.FloatField(help_text='FS Rating')),
                ('fsraceno', models.CharField(help_text='distance', max_length=250, unique=True)),
                ('draw', models.SmallIntegerField(help_text='barrier')),
                ('damname', models.CharField(help_text="Dam's name", max_length=250)),
                ('damid', models.IntegerField(blank=True, default=None, help_text='Dam id')),
                ('damsirename', models.CharField(help_text="Dam's sire name", max_length=250)),
                ('damsireid', models.IntegerField(blank=True, default=None, help_text='Dam sire id')),
                ('ownerid', models.IntegerField(blank=True, default=None, help_text='Owner id')),
                ('racetime', models.CharField(help_text='Race off time', max_length=250)),
                ('totalruns', models.SmallIntegerField(help_text='total runs horse')),
                ('isplaced', models.BooleanField(help_text='Placed?')),
                ('isbfplaced', models.BooleanField(help_text='is Placed on Betfair?')),
                ('stats', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={})),
            ],
            options={
                'ordering': ('-racedate',),
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('systemtype', models.CharField(choices=[('tg', 'Trainglot'), ('mi', 'Metainvest'), ('custom', 'Custom'), ('other', 'Other')], default='tg', max_length=50)),
                ('systemname', models.CharField(max_length=50, unique=True)),
                ('snapshotid', models.IntegerField()),
                ('description', models.TextField(blank=True, help_text='rationale')),
                ('isActive', models.BooleanField(help_text='active or test?')),
                ('isTurf', models.BooleanField(help_text='turf or AWT?')),
                ('exposure', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=500), size=None)),
                ('query', django.contrib.postgres.fields.jsonb.JSONField()),
                ('rpquery', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('snapshotid',),
            },
        ),
        migrations.CreateModel(
            name='SystemSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snapshottype', models.CharField(choices=[('LIVE', 'LIVE'), ('HISTORICAL', 'HISTORICAL')], default='HISTORICAL', help_text='initial(historical/live) ', max_length=15)),
                ('bluerows', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('greenrows', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('redrows', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('stats', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('bfwins', models.SmallIntegerField(default=None, null=True)),
                ('bfruns', models.SmallIntegerField(default=None, null=True)),
                ('winsr', models.FloatField(default=None, null=True)),
                ('expectedwins', models.FloatField(default=None, null=True)),
                ('a_e', models.FloatField(default=None, null=True)),
                ('levelbspprofit', models.DecimalField(decimal_places=2, default=None, max_digits=10)),
                ('levelbsprofitpc', models.FloatField(default=None, null=True)),
                ('a_e_last50', models.FloatField(default=None, null=True)),
                ('archie_allruns', models.FloatField(default=None, null=True)),
                ('expected_last50', models.FloatField(default=None, null=True)),
                ('archie_last50', models.FloatField(default=None, null=True)),
                ('last50wins', models.SmallIntegerField(default=None, null=True)),
                ('last50pc', models.FloatField(default=None, null=True)),
                ('last50str', models.CharField(default=None, max_length=250, null=True)),
                ('last28daysruns', models.SmallIntegerField(default=None, null=True)),
                ('profit_last50', models.DecimalField(decimal_places=2, default=None, max_digits=10, null=True)),
                ('longest_losing_streak', models.SmallIntegerField(default=None, null=True)),
                ('average_losing_streak', models.FloatField(default=None, null=True)),
                ('average_winning_streak', models.FloatField(default=None, null=True)),
                ('red_rows_ct', models.SmallIntegerField(default=None, null=True)),
                ('blue_rows_ct', models.SmallIntegerField(default=None, null=True)),
                ('green_rows_ct', models.SmallIntegerField(default=None, null=True)),
                ('total_rows_ct', models.SmallIntegerField(default=None, null=True)),
                ('red_rows_pc', models.FloatField(default=None, null=True)),
                ('blue_rows_pc', models.FloatField(default=None, null=True)),
                ('green_rows_pc', models.FloatField(default=None, null=True)),
                ('individualrunners', models.FloatField(default=None, null=True)),
                ('uniquewinners', models.FloatField(default=None, null=True)),
                ('uniquewinnerstorunnerspc', models.FloatField(default=None, null=True)),
                ('yearstats', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('yearcolorcounts', django.contrib.postgres.fields.jsonb.JSONField(default={})),
                ('totalbackyears', models.SmallIntegerField(default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('runners', models.ManyToManyField(to='systems.Runner')),
                ('system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='systemsnapshot', to='systems.System')),
            ],
            options={
                'ordering': ('-levelbsprofitpc',),
                'get_latest_by': 'created',
            },
        ),
        migrations.AlterUniqueTogether(
            name='runner',
            unique_together=set([('racedate', 'horsename')]),
        ),
    ]
